#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Chaos.h"

void input_int_var(int* a)																						// функция ввода и проверки целых чисел
{
	int check = 0;
	while (check != 1)	                                                                                        // цикл ввода и проверки
	{
		printf("Введите размерность строки (целое десятичное число): ");										// вывод сообщения с описанием вводимой величины
		check = scanf_s("%d", a);								                                                // ввод значения
		if (check != 1)														                                    // проверка правильности типа введённого значения
			printf("\033[1;31mОшибка ввода: не целое десятичное число, попробуйте ввести еще раз.\033[0m\n");   // вывод сообщения об ошибке
		else if (*a <= 0)
		{
			printf("\033[1;31mОшибка ввода: строка не может быть пустой, попробуйте ввести еще раз.\033[0m\n"); // вывод сообщения об ошибке
			check--;
		}
		rewind(stdin);																							// очистка буфера ввода
	}
}

void input_str(char* str, int n)// функцмя ввода строки
{
	printf("Введите строку: ");
	fgets(str, n+1, stdin);		// ввод строки
	rewind(stdin);				// очистка буфера ввода
}

char* str_memory_alloc(int n)									// функция выделения памяти для строки
{
	char* str = (char*)calloc(n + 1, sizeof(char));				// выделение памяти для строки
	if (str == NULL) {											// обработка неправильного выделения памяти
		printf("\033[1;31mОшибка выделения памяти.\033[0m\n");	// вывод сообщения об ошибке
		return 0;
	}
	return str;
}

void str_memory_free(char* str)		// функция освобождения памяти двумерного динамического массива
{
	free(str);						// освобождение памяти
	str = NULL;						// обнуление указателя
}

char* change_str(char* str)									// функция изменения строки
{
	int write_index = 0;									// индекс записи элементов новой строки
	int read_index = 0;										// индекс чтения изначальной строки

	while (*(str + read_index) != '\0')						// цикл изменения строки
	{
		if (*(str + read_index) == '#')						
		{
			if (write_index > 0) 
			{
				write_index--;								// сдвиг индекса записи элементов новой строки
			}
		}
		else
		{
			*(str + write_index) = *(str + read_index);		// запись элемента изначальной строки в новую строку
			write_index++;									// сдвиг индекса записи элементов новой строки
		}
		read_index++;
	}
	*(str + write_index) = '\0';							// запись нуль-символа в конец новой строки
	return (char*)realloc(str, sizeof(char) * write_index);	// возвращение новой строки
}

void output_str(char* str, int t)								// функция вывода двухмерного массива
{
	switch (t)													// вывод сообщений в консоль
	{
	case 1:
		printf("Строка \033[1;36mдо\033[0m изменений: \n\n");
		break;
	case 2:
		printf("Строка \033[1;36mпосле\033[0m изменений: \n\n");
		break;
	default:
		break;
	}

	puts(str);													// вывод строки
	printf("\n");												// переход на новую строку в консоли
}

void restart_program(int* flag)																					// функция перезапуска программы
{
	printf("Для завершения работы программы введите \033[1;32m0\033[0m, иначе перезапуск программы.\n");	    // запрос на перезапуск программы 
	scanf_s("%d", flag);																						// ввод значения флага цикла программы
	if (flag != 0)																								// проверка значения флага
		printf("Перезапуск программы...\n");																	// вывод сообщения о перезапуске программы
	else
		printf("Завершение работы...\n");																		// вывод сообщения о завершении работы программы
}